generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                          String    @id @unique @default(uuid()) @db.Uuid
  createdAt                   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt                   DateTime  @updatedAt @db.Timestamp(6)
  email                       String?   @unique @db.VarChar(128)
  corporateReason             String?   @unique @db.VarChar(128)
  fantasyName                 String?   @unique @db.VarChar(128)
  cnpj                        String    @unique @db.VarChar(18)
  stateRegistration           String?   @db.VarChar(9)
  municipalRegistration       String?   @db.VarChar(14)
  nire                        String?   @db.VarChar(11)
  taxationRegime              String?   @db.VarChar(80)
  operatingLicense            String?   @db.VarChar(255)
  licenseValidity             DateTime?
  openingDate                 DateTime?
  blocked                     Boolean   @default(false)
  status                      Boolean   @default(true)
  mainCnae                    String?   @db.VarChar(7)
  secondaryCnae               String?   @db.VarChar(7)
  fiscalResponsibleName       String?   @db.VarChar(80)
  fiscalResponsibleCpf        String?   @db.VarChar(14)
  fiscalResponsibleRne        String?   @db.VarChar(10)
  hasDigitalCertificate       Boolean?
  digitalCertificate          String?   @db.VarChar(255)
  validatedDigitalCertificate DateTime?
  regularizationProcessNumber String?   @db.VarChar(28)
  fiscalObservations          String?   @db.Text
  createdBy                   String?   @db.VarChar(128)

  ownerId String? @db.Uuid
  users   User[]  @relation("CompanyUsers")
  User    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.Uuid

  @@index([cnpj, email])
  @@map("Companies")
}

model User {
  id                  String    @id @unique @default(uuid()) @db.Uuid
  createdAt           DateTime  @default(now()) @db.Timestamp(6)
  updatedAt           DateTime  @updatedAt @db.Timestamp(6)
  email               String    @unique @db.VarChar(80)
  userName            String    @db.VarChar(80)
  active              Boolean   @default(false)
  code                Int       @unique
  password            String?   @db.VarChar(255)
  resetPasswordToken  String?   @db.VarChar(255)
  resetPasswordSentAt DateTime?
  rememberCreateAt    DateTime?
  lastPasswordUpdate  DateTime? @db.Timestamp(6)
  passwordExpiration  DateTime? @db.Timestamp(6)
  failedLoginAttempts Int?      @default(0)
  lockoutTime         DateTime?

  company   Company?    @relation("CompanyUsers", fields: [companyId], references: [id])
  companyId String?     @db.Uuid
  Company   Company[]
  UserToken UserToken[]

  @@index([email, code])
  @@map("users")
}

model UserToken {
  id           String   @id @unique @default(uuid()) @db.Uuid
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.Uuid
  accessToken  String
  refreshToken String
  deviceName   String

  @@map("user_tokens")
}
